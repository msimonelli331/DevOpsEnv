vars:
  domain: devops
  ip: 127.0.0.1

coredns:
  image:
    repository: coredns/coredns
    tag: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  replicaCount: 1

  resources:
    limits:
      memory: 170Mi
    requests:
      cpu: 100m
      memory: 70Mi

  rollingUpdate:
    maxUnavailable: 0
    maxSurge: 10%

  podAnnotations: {}
  serviceType: ClusterIP

  prometheus:
    service:
      enabled: true
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9153"
    monitor:
      enabled: false

  service:
    name: kube-dns
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    clusterIP: "" # This should be populated or left empty if not used

  serviceAccount:
    create: true
    name: coredns

  rbac:
    create: true
    pspEnable: false

  isClusterService: true

  priorityClassName: system-cluster-critical

  podSecurityContext: {}

  securityContext:
    allowPrivilegeEscalation: $ALLOWESCALATION
    capabilities:
      add:
        - NET_BIND_SERVICE
      drop:
        - all
    readOnlyRootFilesystem: true

  servers:
    - zones:
        - zone: .
      port: 53
      plugins:
        - name: errors
        - name: health
          configBlock: |-
            lameduck 5s
        - name: ready
        - name: log
          parameters: .
          configBlock: |-
            class error
        - name: kubernetes
          parameters: cluster.local in-addr.arpa ip6.arpa
          configBlock: |-
            pods insecure
            fallthrough in-addr.arpa ip6.arpa
        - name: prometheus
          parameters: :9153
        - name: forward
          parameters: . $NAMESERVERS
        - name: cache
          parameters: 30
        - name: loop
        - name: reload
        - name: loadbalance

  extraConfig: {}

  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    timeoutSeconds: 5
    failureThreshold: 5
    successThreshold: 1

  readinessProbe:
    enabled: true

  affinity: {}

  topologySpreadConstraints: []

  nodeSelector: {}

  tolerations:
    - key: "CriticalAddonsOnly"
      operator: "Exists"

  podDisruptionBudget: {}

  zoneFiles:
    - filename: ingress.corefile
      contents: |-
        import /etc/coredns/custom/*.server

  extraVolumes:
    - name: custom-config-volume
      configMap:
        name: coredns-custom
        optional: true
  extraVolumeMounts:
    - name: custom-config-volume
      mountPath: /etc/coredns/custom
      readOnly: true
  extraSecrets: []

  k8sAppLabelOverride: "kube-dns"

  customLabels:
    addonmanager.kubernetes.io/mode: Reconcile

  customAnnotations: {}

  hpa:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    metrics: []

  autoscaler:
    enabled: false
    coresPerReplica: 256
    nodesPerReplica: 16
    min: 0
    max: 0
    includeUnschedulableNodes: false
    preventSinglePointFailure: true
    podAnnotations: {}
    image:
      repository: registry.k8s.io/cpa/cluster-proportional-autoscaler
      tag: "1.8.5"
      pullPolicy: IfNotPresent
      pullSecrets: []
    priorityClassName: ""
    affinity: {}
    nodeSelector: {}
    tolerations: []
    resources:
      requests:
        cpu: "20m"
        memory: "10Mi"
      limits:
        cpu: "20m"
        memory: "10Mi"
    configmap:
      annotations: {}
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 5
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

  deployment:
    enabled: true
    name: ""
    annotations:
      priorityClassName: system-cluster-critical
