# Default values for gitea-runner.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

token: ""
cacert: ""
gitURL: &gitURL http://git.devops

images:
  - name: runner
    repository: gitea/act_runner
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "0.2.10"
    command:
      [
        "sh",
        "-c",
        "while ! nc -z localhost 2376 </dev/null; do echo 'waiting for docker daemon...'; sleep 5; done; /sbin/tini -- /opt/act/run.sh",
      ]
    env:
      - name: CONFIG_FILE
        value: /runner-config/config.yaml
      - name: DOCKER_HOST
        value: tcp://localhost:2376
      - name: DOCKER_CERT_PATH
        value: /certs/client
      - name: DOCKER_TLS_VERIFY
        value: "1"
      - name: GITEA_INSTANCE_URL
        value: *gitURL
      - name: GITEA_RUNNER_JOB_CONTAINER_FORCE_PULL
        value: "true"
      - name: GITEA_RUNNER_REGISTRATION_TOKEN
        valueFrom:
          secretKeyRef:
            name: runner-secret
            key: token
    volumeMounts:
      - name: docker-certs
        mountPath: /certs
      - name: gitea-runner-volume
        mountPath: /data
      - name: runner-config
        mountPath: /runner-config
    service:
      enabled: false
  - name: daemon
    repository: docker
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "23.0.6-dind"
    initContainer:
      - name: init-daemon
        image: "docker:23.0.6-dind"
        imagePullPolicy: IfNotPresent
        command: [
            "sh",
            "-c",
            "cp /private-registry-certs/ca.crt /usr/local/share/ca-certificates/ca.crt \
            && update-ca-certificates \
            && mkdir -p /etc/docker/certs.d/container.devops \
            && cp /private-registry-certs/ca.crt /etc/docker/certs.d/container.devops",
          ]
        volumeMounts:
          - name: private-registry-cert
            readOnly: true
            mountPath: "/private-registry-certs"
          - name: ca-certificates
            mountPath: "/usr/local/share/ca-certificates"
          - name: private-docker-certs
            mountPath: "/etc/docker/certs.d"
          - name: ssl-certs
            mountPath: "/etc/ssl/certs"
    env:
      - name: DOCKER_TLS_CERTDIR
        value: /certs
    securityContext:
      privileged: true
    volumeMounts:
      - name: docker-certs
        mountPath: /certs
      - name: ca-certificates
        mountPath: "/usr/local/share/ca-certificates"
      - name: private-docker-certs
        mountPath: "/etc/docker/certs.d"
      - name: ssl-certs
        mountPath: "/etc/ssl/certs"
    service:
      enabled: true

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}

service:
  type: ClusterIP
  name: dockerd
  containerPort: 2376
  protocol: TCP
  targetPort: 2376

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  {}
  # httpGet:
  #   path: /
  #   port: http
readinessProbe:
  {}
  # httpGet:
  #   path: /
  #   port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: gitea-runner-volume
    persistentVolumeClaim:
      claimName: gitea-runner-pvc
  - name: docker-certs
    emptyDir: {}
  - name: private-registry-cert
    secret:
      secretName: registry-secret
  - name: ca-certificates
    emptyDir: {}
  - name: private-docker-certs
    emptyDir: {}
  - name: ssl-certs
    emptyDir: {}
  - name: runner-config
    configMap:
      name: runner-config

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

persistentVolume:
  enabled: true
  hostPath: /mnt/devops/gitea-runner

nodeSelector: {}

tolerations: []

affinity: {}
